name: CI Pipeline

on:
  push:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

env:
  NODE_VERSION: '18'
  CACHE_NAME: node-modules

jobs:
  # Quality and Security Jobs
  quality-checks:
    name: Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for vulnerable dependencies
        run: npm audit --audit-level high --production

  # Build Jobs
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality-checks]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application (development)
        run: npm run build
        env:
          NODE_ENV: development

      - name: Build application (production)
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check build artifacts
        run: |
          ls -la dist/
          du -sh dist/
          echo "Build completed successfully"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [quality-checks]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit -- --coverage --watchAll=false

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage
          path: coverage/
          retention-days: 30

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality-checks]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration -- --watchAll=false

  # UAT Tests (End-to-End) - Temporarily disabled
  # uat-tests:
  #   name: UAT Tests
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Install Playwright browsers
  #       run: npx playwright install --with-deps

  #     - name: Download build artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build-artifacts
  #         path: dist/

  #     - name: Run UAT tests
  #       run: npm run test:uat
  #       env:
  #         NODE_ENV: test

  #     - name: Upload UAT test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: uat-results
  #         path: |
  #           tests/uat/coverage/
  #           tests/uat/screenshots/
  #         retention-days: 30

  #     - name: Upload Playwright videos
  #       uses: actions/upload-artifact@v4
  #       if: failure()
  #       with:
  #         name: playwright-videos
  #         path: test-results/
  #         retention-days: 7

  # Coverage Report (Unit Tests Only)
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download unit coverage
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: unit-coverage
          path: coverage/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          directory: ./coverage
          fail_ci_if_error: false
          verbose: true

  # Performance Analysis
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Analyze bundle size
        run: |
          echo "## Bundle Size Analysis" >> performance-report.md
          echo "### Main Bundle" >> performance-report.md
          du -h dist/*.js | sort -hr >> performance-report.md
          echo "" >> performance-report.md
          echo "### Total Size" >> performance-report.md
          du -sh dist/ >> performance-report.md

      - name: Check bundle size limits
        run: |
          MAIN_BUNDLE_SIZE=$(du -k dist/main.*.js | cut -f1)
          if [ $MAIN_BUNDLE_SIZE -gt 1024 ]; then
            echo "Warning: Main bundle size ($MAIN_BUNDLE_SIZE KB) exceeds 1MB threshold"
            exit 1
          fi

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.md
          retention-days: 30

  # Deployment Readiness Check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [build, unit-tests, integration-tests, quality-checks]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Quality & Security: ${{ needs.quality-checks.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          # echo "UAT Tests: ${{ needs.uat-tests.result }}"
          
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Build failed - deployment blocked"
            exit 1
          fi
          
          if [[ "${{ needs.quality-checks.result }}" != "success" ]]; then
            echo "❌ Quality/Security checks failed - deployment blocked"
            exit 1
          fi
          
          # Allow tests to have some failures but warn
          FAILED_TESTS=0
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "⚠️ Unit tests failed"
            FAILED_TESTS=$((FAILED_TESTS + 1))
          fi
          
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "⚠️ Integration tests failed"
            FAILED_TESTS=$((FAILED_TESTS + 1))
          fi
          
          # if [[ "${{ needs.uat-tests.result }}" != "success" ]]; then
          #   echo "⚠️ UAT tests failed"
          #   FAILED_TESTS=$((FAILED_TESTS + 1))
          # fi
          
          if [[ $FAILED_TESTS -gt 2 ]]; then
            echo "❌ Too many test failures - deployment blocked"
            exit 1
          elif [[ $FAILED_TESTS -gt 0 ]]; then
            echo "⚠️ Some tests failed but deployment allowed with warnings"
          else
            echo "✅ All checks passed - ready for deployment"
          fi

      - name: Generate deployment summary
        run: |
          echo "# Deployment Summary" > deployment-summary.md
          echo "- **Quality & Security**: ${{ needs.quality-checks.result }}" >> deployment-summary.md
          echo "- **Build**: ${{ needs.build.result }}" >> deployment-summary.md
          echo "- **Unit Tests**: ${{ needs.unit-tests.result }}" >> deployment-summary.md
          echo "- **Integration Tests**: ${{ needs.integration-tests.result }}" >> deployment-summary.md
          # echo "- **UAT Tests**: ${{ needs.uat-tests.result }}" >> deployment-summary.md
          echo "" >> deployment-summary.md
          echo "**Status**: Ready for review" >> deployment-summary.md

      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md
          retention-days: 30