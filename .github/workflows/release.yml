name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  NODE_VERSION: '18'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get-version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Check if prerelease
      id: check-prerelease
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if echo "$VERSION" | grep -qE "(alpha|beta|rc|pre)"; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
          echo "This is a prerelease"
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
          echo "This is a stable release"
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Validate package.json version
      run: |
        PACKAGE_VERSION="v$(node -p "require('./package.json').version")"
        RELEASE_VERSION="${{ steps.get-version.outputs.version }}"
        
        echo "Package.json version: $PACKAGE_VERSION"
        echo "Release version: $RELEASE_VERSION"
        
        if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
          echo "::error::Version mismatch between package.json ($PACKAGE_VERSION) and release tag ($RELEASE_VERSION)"
          exit 1
        fi

    - name: Run full test suite
      run: |
        echo "Running comprehensive tests for release..."
        npm run test:coverage:unit -- --passWithNoTests
        npm run test:integration -- --passWithNoTests
        
        echo "All tests passed for release validation"

    - name: Check for clean working directory
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "::error::Working directory is not clean. Please commit all changes before release."
          git status
          exit 1
        fi

  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: |
        echo "Building application for release..."
        
        # If there's a build script, run it
        if npm run build --if-present; then
          echo "Build completed successfully"
        else
          echo "No build script found, skipping build step"
        fi

    - name: Create build artifacts
      run: |
        echo "Creating release artifacts..."
        
        # Create release directory
        mkdir -p release-artifacts
        
        # Copy important files
        cp package.json release-artifacts/
        cp README.md release-artifacts/ 2>/dev/null || echo "No README.md found"
        cp CHANGELOG.md release-artifacts/ 2>/dev/null || echo "No CHANGELOG.md found"
        
        # Copy source code
        cp -r src/ release-artifacts/src/ 2>/dev/null || echo "No src directory found"
        
        # Copy build output if it exists
        if [ -d "build" ]; then
          cp -r build/ release-artifacts/build/
        elif [ -d "dist" ]; then
          cp -r dist/ release-artifacts/dist/
        fi
        
        # Create archive
        cd release-artifacts
        tar -czf ../mini-golf-break-${{ needs.validate-release.outputs.version }}.tar.gz .
        cd ..
        
        echo "Release artifacts created"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ needs.validate-release.outputs.version }}
        path: mini-golf-break-${{ needs.validate-release.outputs.version }}.tar.gz

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-${{ needs.validate-release.outputs.version }}

    - name: Generate release notes
      id: release-notes
      run: |
        echo "Generating release notes..."
        
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Get previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Create release notes
        echo "# Release $VERSION" > release-notes.md
        echo "" >> release-notes.md
        
        if [ ! -z "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" >> release-notes.md
          echo "" >> release-notes.md
          
          # Get commit messages since last tag
          git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" --no-merges >> release-notes.md
        else
          echo "## Initial Release" >> release-notes.md
          echo "" >> release-notes.md
          echo "- Initial release of Mini Golf Break" >> release-notes.md
        fi
        
        echo "" >> release-notes.md
        echo "## Installation" >> release-notes.md
        echo "" >> release-notes.md
        echo "Download the release archive and extract it to your desired location." >> release-notes.md
        echo "" >> release-notes.md
        echo "\`\`\`bash" >> release-notes.md
        echo "npm install" >> release-notes.md
        echo "npm start" >> release-notes.md
        echo "\`\`\`" >> release-notes.md

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        release_name: Release ${{ needs.validate-release.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is-prerelease }}

    - name: Upload release archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./mini-golf-break-${{ needs.validate-release.outputs.version }}.tar.gz
        asset_name: mini-golf-break-${{ needs.validate-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always() && needs.create-release.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Notify release completion
      run: |
        echo "âœ… Release ${{ needs.validate-release.outputs.version }} completed successfully!"
        echo ""
        echo "Release details:"
        echo "- Version: ${{ needs.validate-release.outputs.version }}"
        echo "- Prerelease: ${{ needs.validate-release.outputs.is-prerelease }}"
        echo "- Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}"
        echo ""
        echo "Next steps:"
        echo "- Verify the release on GitHub"
        echo "- Update documentation if needed"
        echo "- Announce the release to users"

    - name: Create version bump PR (for stable releases)
      if: needs.validate-release.outputs.is-prerelease == 'false'
      run: |
        echo "For stable releases, consider creating a version bump PR for the next development cycle"
        echo "This can be done manually or automated based on your versioning strategy"